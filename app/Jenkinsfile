pipeline {
    agent any

    tools {
        jdk 'jdk17'
        gradle 'gradle-8.7'
    }

    environment {
        DB_HOST = "${env.DB_HOST}"
        DB_NAME = "${env.DB_NAME}"
        DB_USER = "${env.DB_USER}"
        DB_PASS = "${env.DB_PASS}"
        KAKAO_ADMIN_KEY = "${env.KAKAO_ADMIN_KEY}"
        KAKAO_CLIENT_ID = "${env.KAKAO_CLIENT_ID}"
        KAKAO_CLIENT_SECRET = "${env.KAKAO_CLIENT_SECRET}"
        UPLOAD_PATH = "${env.UPLOAD_PATH}"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/mina7038/jenkins-amore.git'
            }
        }

        stage('Build') {
            steps {
                bat 'gradle clean build'
            }
        }

        stage('Test') {
            steps {
                bat 'gradle test'
            }
        }

        stage('Run Locally') {
            steps {
                bat 'java -jar build\\libs\\app-0.0.1-SNAPSHOT.jar'
            }
        }

        stage('Deploy to AWS EC2') {
            steps {
                bat """
                REM ================================
                REM Step 1: EC2에 JAR 업로드
                REM ================================
                scp -i C:\\Users\\M\\.ssh\\jenkins.pem ^
                 -o StrictHostKeyChecking=no ^
                 build\\libs\\app-0.0.1-SNAPSHOT.jar ^
                 ec2-user@ec2-54-180-247-132.ap-northeast-2.compute.amazonaws.com:/home/ec2-user/

                REM ================================
                REM Step 2: EC2에서 기존 애플리케이션 종료 및 재실행
                REM ================================
                ssh -i C:\\Users\\M\\.ssh\\jenkins.pem ^
                 -o StrictHostKeyChecking=no ^
                 ec2-user@ec2-54-180-247-132.ap-northeast-2.compute.amazonaws.com ^
                 "pkill -f app-0.0.1-SNAPSHOT.jar || true && nohup java -jar app-0.0.1-SNAPSHOT.jar > app.log 2>&1 &"
                """
            }
        }
    }
}
